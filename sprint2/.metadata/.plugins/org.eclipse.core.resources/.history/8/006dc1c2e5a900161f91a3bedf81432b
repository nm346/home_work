
	package eMarket.controller;

	import org.springframework.stereotype.Controller;
	import org.springframework.ui.Model;
	import org.springframework.web.bind.annotation.ExceptionHandler;
	import org.springframework.web.bind.annotation.ModelAttribute;
	import org.springframework.web.bind.annotation.RequestMapping;
	import org.springframework.web.bind.annotation.RequestMethod;
	import org.springframework.web.bind.annotation.RequestParam;

	import eMarket.EMarketApp;
	import eMarket.domain.Item;
	import eMarket.domain.Product;
	

	@Controller
	@RequestMapping("/item")
	public class ItemController {

	    @RequestMapping(value = "/Detail")
	    	public String productDetail(@ModelAttribute("product") Product product, Model model, @RequestParam(value="productId", required=false, defaultValue="-1") int productId) {
	    	
	    	model.addAttribute("productList", EMarketApp.getStore().getProductList());
	    	model.addAttribute("product", product);
	    	return "form/itemDetail";
	    	} 
	    @RequestMapping(value = "/add", method = RequestMethod.POST)
	    public String ItemMaster(@ModelAttribute("Item") Item item, Model model) {
	    	/*if (item.getPrice() < 0.0) 
				throw new SpringException("Value is negative.");
			if (item.getDate().equals("")) 
				throw new SpringException("Date is empty.");    	

	    	EMarketApp.getStore().getItemList().removeIf(p -> (p.getId() == item.getId()));
	    	EMarketApp.getStore().getItemList().add(item);
	   		
	    	model.addAttribute("ItemList", EMarketApp.getStore().getItemList()); */
	        return "form/orderMaster";
	    }   
	    /*
	    
	    @RequestMapping(value = "/ItemDetail", method = RequestMethod.GET)
	    public String ItemDetail(@ModelAttribute("Item") Item item, @RequestParam(value="ItemId", required=false, defaultValue="-1") int ItemId) {
	    	if (ItemId >= 0) {
	    		// modify
	    		Item p2 = EMarketApp.getStore().getItemList().stream().filter(p -> (((Item) p).getId() == ItemId)).findAny().get();
	    		Item.setId(p2.getId());
	    		if (p2.getDate().equals("")) 
	    			throw new SpringException("Date is empty.");
	    		Item.setDate(p2.getDate());
	    		Item.setDescription(p2.getDescription());
	    		if (p2.getPrice() < 0.0) 
	    			throw new SpringException("Value is negative.");
	    		Item.setPrice(p2.getPrice());
	    	} else {
	    		// add
	    		Item.setId();
	    	}
	    	return "form/ItemDetail";
	    }   
	    
	    @RequestMapping(value = "/add", method = RequestMethod.POST)
	    public String ItemMaster(@ModelAttribute("Item") Item item, Model model) {
	    	if (item.getPrice() < 0.0) 
				throw new SpringException("Value is negative.");
			if (item.getDate().equals("")) 
				throw new SpringException("Date is empty.");    	

	    	EMarketApp.getStore().getItemList().removeIf(p -> (p.getId() == item.getId()));
	    	EMarketApp.getStore().getItemList().add(item);
	   		
	    	model.addAttribute("ItemList", EMarketApp.getStore().getItemList());
	        return "form/ItemMaster";
	    }   

	    @RequestMapping(value = "/delete", method = RequestMethod.GET)
	    public String ItemMaster(@RequestParam(value="ItemId", required=false, defaultValue="-1") int ItemId, Model model) {
	    	EMarketApp.getStore().getItemList().removeIf(p -> (p.getId() == itemId));
	    	model.addAttribute("ItemList", EMarketApp.getStore().getItemList());
	    	return "form/ItemMaster";
	    }  */ 
	    
}
